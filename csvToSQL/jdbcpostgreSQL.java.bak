import java.sql.*;
import java.util.Scanner;
import java.io.File;
import java.io.*;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.FileReader;
/*
CSCE 331
9-28-2022 Lab
 */
public class jdbcpostgreSQL {

  //Commands to run this script
  //This will compile all java files in this directory
  //javac *.java
  //This command tells the file where to find the postgres jar which it needs to execute postgres commands, then executes the code

  /* DON"T COPY PASTE WRITE THE COMMANDS IN YOUR TERMINAL MANUALLY*/

  //Windows: java -cp ".;postgresql-42.2.8.jar" jdbcpostgreSQL
  //Mac/Linux: java -cp ".:postgresql-42.2.8.jar" jdbcpostgreSQL

  //MAKE SURE YOU ARE ON VPN or TAMU WIFI TO ACCESS DATABASE
  public static void main(String args[]) {

    //Building the connection with your credentials
    Connection conn = null;
    String teamNumber = "71"; // Your team number
    String sectionNumber = "906"; // Your section number
    String dbName = "csce331_" + sectionNumber + "_" + teamNumber;
    String dbConnectionString = "jdbc:postgresql://csce-315-db.engr.tamu.edu/" + dbName;
    dbSetup myCredentials = new dbSetup(); 

    //Connecting to the database
    try {
        conn = DriverManager.getConnection(dbConnectionString, dbSetup.user, dbSetup.pswd);
     } catch (Exception e) {
        e.printStackTrace();
        System.err.println(e.getClass().getName()+": "+e.getMessage());
        System.exit(0);
     }

     System.out.println("Opened database successfully");


     try{
       //create a statement object
		Statement stmt = conn.createStatement();
		String sqlStatement = "";
      
        String file = "ingredient.csv";
		String line;  
		
        BufferedReader br = new BufferedReader(new FileReader(file));
		while((line = br.readLine()) != null){
                String[] vals = line.split(",");
                System.out.println(vals[0] + vals[1]);
				/*Needed for sales history table. Converts string id to int from scanner */
                /*
                String idRaw = vals[0];
                String idMod = "";
                for (int i =0; i < idRaw.length(); i++){
                  if(Character.isDigit(idRaw.charAt(i))){
                    idMod += idRaw.charAt(i);
                  }
                }
                
                System.out.println(idMod);
                int id = Integer.parseInt(idMod);
                */
				
                //sqlStatement = "INSERT INTO saleshistory (" + "sales_id," + "sales_cost," + "sales_date," + "sales_server)" + " VALUES(" + id  + "," + vals[1] + "," + "'" + vals[2] + "'" + "," + "'" + vals[3] +"'" + ")";  
                sqlStatement = "INSERT INTO inventory (" + "inventory_name," + "inventory_count)" + " VALUES(" + "'" + vals[0] + "'" + ","  + vals[1]  + ")";
                //System.out.println(sqlStatement);
                stmt.addBatch(sqlStatement);
                        
            }                               
	    stmt.executeBatch();
         
       //Running a query
       //TODO: update the sql command here
       //                      INSERT INTO salesHistory (sales_id, sales_cost, sales_date, sales_server) VALUES(7,5.49,9/20/2022,server1)

       //String sqlStatement = "INSERT INTO salesHistory (sales_id, sales_cost, sales_date, sales_server) VALUES('Rohit', 906 , 'Pulp Fiction', '05/17/2015')";

       //send statement to DBMS
       //This executeQuery command is useful for data retrieval
       //ResultSet result = stmt.executeQuery(sqlStatement);
       //OR
       //This executeUpdate command is useful for updating data
       //int result = stmt.executeUpdate(sqlStatement);

       //OUTPUT
       //You will need to output the results differently depeninding on which function you use
       System.out.println("--------------------Query Results--------------------");
       //while (result.next()) {
       //System.out.println(result.getString("column_name"));
       //}
       //OR
       //System.out.println(result);
   } catch (Exception e){
       e.printStackTrace();
       System.err.println(e.getClass().getName()+": "+e.getMessage());
       System.exit(0);
   }

    //closing the connection
    try {
      conn.close();
      System.out.println("Connection Closed.");
    } catch(Exception e) {
      System.out.println("Connection NOT Closed.");
    }//end try catch
  }//end main
}//end Class
